#ifndef ITP_GTEST_EXTENSIONS_H_INCLUDED_
#define ITP_GTEST_EXTENSIONS_H_INCLUDED_

#include <gtest/gtest.h>
#include <gmock/gmock.h>

namespace testing {

#define EXPECT_ITERABLE_BASE(PREDICATE, REFTYPE, TARTYPE, ref, target) \
  { \
  const REFTYPE& ref_(ref); \
  const TARTYPE& target_(target); \
  REFTYPE::const_iterator ref_iter = ref_.begin(); \
  TARTYPE::const_iterator tar_iter = target_.begin(); \
  unsigned int i = 0; \
  while (ref_iter != ref_.end()) { \
  if (tar_iter == target_.end()) { \
  ADD_FAILURE() << #target " has a smaller length than " #ref ; \
  break; \
  } \
    PREDICATE(*ref_iter, *tar_iter) \
    << "Containers " #ref " (ref_iter) and " #target " (tar_iter)" \
    " differ at index " << i; \
    ++ref_iter; \
    ++tar_iter; \
    ++i; \
  } \
  EXPECT_TRUE(tar_iter == target_.end()) \
  << #ref " has a smaller length than " #target ; \
  }

#define EXPECT_ITERABLE_EQ(TYPE, ref, target) \
  EXPECT_ITERABLE_BASE(EXPECT_EQ, TYPE, TYPE, ref, target)

#define EXPECT_ITERABLE_EQ2(REFTYPE, TARTYPE, )
} // testing

#endif // ITP_GTEST_EXTENSIONS_H_INCLUDED_

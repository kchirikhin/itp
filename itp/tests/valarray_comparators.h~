#ifndef ITP_VALARRAY_COMPARATORS_H_INCLUDED_
#define ITP_VALARRAY_COMPARATORS_H_INCLUDED_

#include <valarray>

namespace itp {

template <typename T>
void ExpectValarrayEmpty(const std::valarray<T> &va) {
  EXPECT_EQ(va.size(), 0);
}

template <typename T>
void ExpectValarrayEq(const std::valarray<T> &lhs, const std::valarray<T> &rhs) {
  EXPECT_EQ(lhs.size(), rhs.size());
  for (size_t i = 0; i < lhs.size(); ++i) {
    EXPECT_EQ(lhs[i], rhs[i]);
  }
}

template <>
void ExpectValarrayEq(const std::valarray<Double> &lhs, const std::valarray<Double> &rhs) {
  EXPECT_EQ(lhs.size(), rhs.size());
  for (size_t i = 0; i < lhs.size(); ++i) {
    EXPECT_DOUBLE_EQ(lhs[i], rhs[i]);
  }
}

} // itp

#endif // ITP_VALARRAY_COMPARATORS_H_INCLUDED_

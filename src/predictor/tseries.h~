/**
 * @file   tseries.h
 * @author Konstantin <user10101@user10101-Satellite-L855>
 * @date   Wed Apr 18 19:51:56 2018
 *
 * @brief  Contains implementation of words.
 *
 *
 */
#ifndef TSERIES_H_INCLUDED
#define TSERIES_H_INCLUDED

#include "dtypes.h"

#include <vector>
#include <iostream>
#include <initializer_list>

namespace itp {
    /*template <typename T>
    class Plain_tseries {
    private:
        using Base_container = std::vector<T>;
    public:
        using iterator = typename Base_container::iterator;
        using const_iterator = typename Base_container::const_iterator;
        
        Plain_tseries() = default;
        Plain_tseries(size_t, T = T());
        
        template <typename U>
        Plain_tseries(std::initializer_list<U> l)
            : series {std::begin(l), std::end(l)} {}

        template <typename Iter>
        Plain_tseries(Iter first, Iter last)
            : series(first, last) {}

        void push_back(T);
        size_t size() const;

        void clear();

        iterator begin();
        const_iterator cbegin() const;

        iterator end();
        const_iterator cend() const;

        T& operator[](size_t);
        const T& operator[](size_t) const;
    private:
        std::vector<T> series;
    };

    template <typename T>
    std::ostream & operator << (std::ostream &, const Plain_tseries<T> &);

    template <typename T>
    class Preprocessed_tseries : public Plain_tseries<T> {};*/
} // of itp

/*template <typename T>
itp::Plain_tseries<T>::Plain_tseries(size_t init_size, T init_elem)
    : series(init_size, init_elem) {}

template <typename T>
void itp::Plain_tseries<T>::push_back(T s) {
    series.push_back(s);
}

template <typename T>
size_t itp::Plain_tseries<T>::size() const {
    return series.size();
}

template <typename T>
void itp::Plain_tseries<T>::clear() {
    series.clear();
}

template <typename T>
typename itp::Plain_tseries<T>::iterator itp::Plain_tseries<T>::begin() {
    return series.begin();
}

template <typename T>
typename itp::Plain_tseries<T>::const_iterator itp::Plain_tseries<T>::cbegin() const {
    return series.cbegin();
}

template <typename T>
typename itp::Plain_tseries<T>::iterator itp::Plain_tseries<T>::end() {
    return series.end();
}

template <typename T>
typename itp::Plain_tseries<T>::const_iterator itp::Plain_tseries<T>::cend() const {
    return series.cend();
}
    
template <typename T>
T& itp::Plain_tseries<T>::operator[](size_t pos) {
    return series[pos];
}

template <typename T>
const T& itp::Plain_tseries<T>::operator[](size_t pos) const {
    return series[pos];
}

template <typename T>
std::ostream & itp::operator << (std::ostream &ost, const Plain_tseries<T> &w) {
    for (size_t i = 0; i < w.size(); ++i) {
        ost << w[i];
    }

    return ost;
    }*/

#endif // TSERIES_H_INCLUDED

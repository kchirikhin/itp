#ifndef PREPROC_INFO_INCLUDED
#define PREPROC_INFO_INCLUDED

#include "dtypes.h"

#include <limits>
#include <cassert>
#include <stack>

namespace itp {

   /**
    * Class contains all information about preliminary actions with a time series. This information
    * allows to apply inverse transformations.
    */
    template <typename T>
    class Preproc_info {
    public:
        size_t applied_diff_count() const;
        
        void push_last_diff_value(const T &);
        T pop_last_diff_value();

        void copy_preprocessing_info_from(const Preproc_info<T> &);
    private:
        std::stack<T> last_values;
    };
} // of itp

template <typename T>
size_t itp::Preproc_info<T>::applied_diff_count() const {
    return last_values.size();
}

template <typename T>
void itp::Preproc_info<T>::push_last_diff_value(const T &value) {
    last_values.push(value);
}

template <typename T>
T itp::Preproc_info<T>::pop_last_diff_value() {
    T res;
    if (0 < last_values.size()) {
        res = last_values.top();
        last_values.pop();
    }

    return res;
}

template <typename T>
void itp::Preproc_info<T>::copy_preprocessing_info_from(const Preproc_info<T> &src) {
    return;
}

#endif // of PREPROC_INFO_INCLUDED
